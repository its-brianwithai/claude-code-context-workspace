import 'dart:async';
import 'dart:isolate';
import 'package:flutter/foundation.dart';
import 'package:friday_energy/core/constants/k_durations.dart';
import 'package:loglytics/loglytics.dart';

/// A utility class that simplifies running computations in background with progress reporting.
///
/// The TIsolator provides a developer-friendly way to execute CPU-intensive operations
/// using Flutter's `compute` function, which automatically adapts to different platforms
/// (using isolates on native platforms and the main thread on web platforms).
///
/// Example:
/// ```dart
/// final isolator = TIsolator<int, String>();
///
/// // Run a computation in the background
/// final result = await isolator.run(
///   input: 42,
///   computation: (int number, sendProgress) {
///     // Heavy computation here
///     if (sendProgress != null) {
///       sendProgress("50% complete");
///     }
///     return number.toString();
///   },
///   onProgress: (progress) {
///     print("Progress update: $progress");
///   },
/// );
/// ```
class TIsolator<I, O> with Loglytics {
  /// Creates an Isolator for executing computations using Flutter's compute function.
  ///
  /// The generic types define the input and output types:
  /// - `I`: The type of input data passed to the computation.
  /// - `O`: The type of output data returned from the computation.
  TIsolator();

  // üìç LOCATOR ------------------------------------------------------------------------------- \\

  /// Returns a singleton instance of TIsolator.
  ///
  /// Use this method when you need a shared instance across the application.
  static TIsolator<I, O> getInstance<I, O>() {
    return _instances.putIfAbsent('${I.toString()}_${O.toString()}', () => TIsolator<I, O>())
        as TIsolator<I, O>;
  }

  /// Stores singleton instances of TIsolator by their type parameters.
  static final Map<String, TIsolator> _instances = {};

  // üé¨ INIT & DISPOSE ------------------------------------------------------------------------ \\

  /// Disposes all resources used by this isolator.
  ///
  /// Call this method when the isolator is no longer needed to prevent memory leaks.
  void dispose() {
    cancelAll();
    for (final controller in _progressControllers.values) {
      controller.close();
    }
    _progressControllers.clear();
  }

  // üé© STATE --------------------------------------------------------------------------------- \\

  /// Tracks active computations to ensure proper cleanup.
  final Map<String, Completer<void>> _activeComputations = {};

  /// Stream controllers for progress updates.
  final Map<String, StreamController<dynamic>> _progressControllers = {};

  // üõ† UTIL ---------------------------------------------------------------------------------- \\

  /// Generates a unique task ID if none is provided.
  String _generateTaskId(String? debugLabel) {
    return debugLabel ?? '${DateTime.now().microsecondsSinceEpoch}';
  }

  /// Logs a message with the given task ID.
  void _log(String taskId, String message) => log.debug('TIsolator[$taskId]: $message');

  // üß≤ FETCHERS ------------------------------------------------------------------------------ \\

  /// Returns a Future that completes when all computations have finished.
  Future<void> get allDone => _activeComputations.isEmpty
      ? Future.value()
      : Future.wait(_activeComputations.values.map((c) => c.future));

  /// Returns the number of currently active computations.
  int get activeCount => _activeComputations.length;

  /// Returns whether any computations are currently active.
  bool get hasActiveComputations => _activeComputations.isNotEmpty;

  /// Gets a stream of progress updates for a specific task.
  ///
  /// Parameters:
  /// - [taskId]: The ID of the task to get progress updates for.
  ///
  /// Returns a Stream that emits progress updates for the specified task.
  Stream<dynamic> progressStream(String taskId) {
    return _progressControllers
        .putIfAbsent(taskId, () => StreamController<dynamic>.broadcast())
        .stream;
  }

  // üèóÔ∏è HELPERS ------------------------------------------------------------------------------- \\

  /// Cleans up resources after a computation completes.
  Future<void> _cleanupResources(
    String taskId,
    ReceivePort? progressReceivePort,
    StreamSubscription<dynamic>? progressSubscription,
  ) async {
    await progressSubscription?.cancel();
    progressReceivePort?.close();

    final completer = _activeComputations.remove(taskId);
    if (completer != null && !completer.isCompleted) {
      completer.complete();
    }

    _log(taskId, 'Resources cleaned up');
  }

  // ü™Ñ MUTATORS ------------------------------------------------------------------------------ \\

  /// Runs a computation using Flutter's compute function.
  ///
  /// Parameters:
  /// - [input]: The input data to pass to the computation.
  /// - [computation]: The computation function to execute.
  ///   The function receives the input and an optional sendProgress function.
  /// - [onProgress]: Optional callback for progress updates.
  /// - [debugLabel]: Optional label for debugging purposes.
  /// - [timeoutDuration]: Optional timeout duration. If not provided, defaults to 30 seconds.
  ///
  /// Returns a Future with the result of the computation.
  ///
  /// Throws a TimeoutException if the computation doesn't complete within the specified timeout.
  Future<O> run({
    required I input,
    required FutureOr<O> Function(I input, void Function(dynamic)? sendProgress) computation,
    void Function(dynamic progress)? onProgress,
    String? debugLabel,
    Duration? timeoutDuration = const Duration(seconds: 30),
    Duration? throttle = kDurationsThrottle,
  }) async {
    final taskId = _generateTaskId(debugLabel);
    final completer = Completer<O>();
    _log(taskId, 'Starting computation');

    StreamSubscription? progressSubscription;
    ReceivePort? progressReceivePort;

    if (onProgress != null) {
      progressReceivePort = ReceivePort();
      final controller = _progressControllers.putIfAbsent(
        taskId,
        () => StreamController<dynamic>.broadcast(),
      );
      // Listen for progress updates from the isolate
      progressSubscription = progressReceivePort.listen((progress) {
        onProgress(progress);
        controller.add(progress);
      });
    }

    // Create a completer for tracking completion
    final doneCompleter = Completer<void>();
    _activeComputations[taskId] = doneCompleter;

    // Set up timeout if specified
    Timer? timeoutTimer;
    if (timeoutDuration != null && timeoutDuration.inMilliseconds > 0) {
      timeoutTimer = Timer(timeoutDuration, () {
        if (!completer.isCompleted) {
          _log(taskId, 'Computation timed out after ${timeoutDuration.inSeconds} seconds');
          completer.completeError(TimeoutException('Computation timed out', timeoutDuration));
          _cleanupResources(taskId, progressReceivePort, progressSubscription);
        }
      });
    }

    try {
      // Create the payload with the progress port if needed
      final payload = _ComputePayload<I, O>(
        input: input,
        taskId: taskId,
        computation: computation,
        progressPort: progressReceivePort?.sendPort,
      );

      // Run the computation using Flutter's compute function
      final result = await compute(_computeRunner<I, O>, payload, debugLabel: debugLabel);

      if (!completer.isCompleted) {
        _log(taskId, 'Computation completed successfully');
        completer.complete(result);
      }
    } catch (error, stackTrace) {
      if (!completer.isCompleted) {
        _log(taskId, 'Computation failed with error: $error');
        completer.completeError(error, stackTrace);
      }
    } finally {
      // Cancel timeout timer if it exists
      timeoutTimer?.cancel();

      // Clean up resources
      await _cleanupResources(taskId, progressReceivePort, progressSubscription);
    }

    return completer.future;
  }

  /// Cancels all running computations.
  ///
  /// Note: This doesn't actually stop the isolates (as Flutter's compute doesn't
  /// provide a way to cancel computations), but it cleans up tracking resources
  /// and completes any pending futures.
  void cancelAll() {
    _log('all', 'Cancelling all computations (${_activeComputations.length} active)');
    for (final completer in _activeComputations.values) {
      if (!completer.isCompleted) {
        completer.complete();
      }
    }
    _activeComputations.clear();
  }

  /// Cancels a specific computation by its task ID.
  ///
  /// Parameters:
  /// - [taskId]: The ID of the task to cancel.
  ///
  /// Returns true if the task was found and cancelled, false otherwise.
  bool cancel(String taskId) {
    final completer = _activeComputations[taskId];
    if (completer != null && !completer.isCompleted) {
      _log(taskId, 'Cancelling computation');
      completer.complete();
      _activeComputations.remove(taskId);
      return true;
    }
    return false;
  }
}

/// Internal class for the compute payload.
class _ComputePayload<I, O> {
  /// Creates a new compute payload.
  const _ComputePayload({
    required this.input,
    required this.taskId,
    required this.computation,
    this.progressPort,
  });

  /// The input data for the computation.
  final I input;

  /// The unique identifier for this computation task.
  final String taskId;

  /// The computation function to execute.
  final FutureOr<O> Function(I input, void Function(dynamic)? sendProgress) computation;

  /// Optional send port for reporting progress.
  final SendPort? progressPort;
}

/// Static runner function to be passed to compute.
///
/// This function runs in a separate isolate and executes the computation
/// with the provided input, sending progress updates if a progress port is available.
Future<O> _computeRunner<I, O>(_ComputePayload<I, O> payload) async {
  final input = payload.input;
  final computation = payload.computation;
  final progressPort = payload.progressPort;

  // Create progress sender function if we have a progress port
  void Function(dynamic)? progressSender;
  if (progressPort != null) {
    progressSender = (dynamic data) {
      progressPort.send(data);
    };
  }

  try {
    // Run the computation with the progress sender
    final result = await computation(input, progressSender);
    return result;
  } catch (e) {
    // Re-throw the error to be caught by the main isolate
    rethrow;
  }
}
