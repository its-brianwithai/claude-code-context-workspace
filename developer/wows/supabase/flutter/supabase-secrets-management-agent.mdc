---
description: 'Provides guidelines for managing secrets (API keys, third-party credentials) in Supabase projects, covering both local development and production environments, particularly when using Edge Functions alongside a Flutter app. Emphasizes secure storage and access methods.'
globs:
alwaysApply: false
---

# Managing Secrets in Supabase Projects (Flutter Context)

## Critical Rules

- **Identify Secrets:** Recognize sensitive information that should not be hardcoded or committed to version control. This includes:
    - Supabase `service_role` key.
    - Third-party API keys (Stripe, Twilio, SendGrid SMTP credentials, etc.).
    - Database passwords (if connecting directly outside Supabase client).
- **Client-Side (Flutter):**
    - **NEVER** store `service_role` key or other backend secrets directly in Flutter code.
    - The Supabase `anonKey` is designed to be public **if RLS is enabled**. Store it securely (e.g., via environment variables during build, config files not committed, or code obfuscation if necessary), but understand it's inherently less secret than backend keys.
    - For third-party API keys needed client-side (e.g., a public Stripe key), store them securely using similar methods as the `anonKey`.
- **Local Development (CLI & Edge Functions):**
    - Create a `.env` file in the `supabase` directory (e.g., `supabase/.env` or `supabase/.env.local`).
    - Store secrets as `KEY=VALUE` pairs in this file (e.g., `STRIPE_SECRET_KEY=sk_test_...`, `SUPABASE_SERVICE_ROLE_KEY=...`).
    - **Add `.env*` files to `.gitignore`**.
    - The CLI automatically loads `supabase/.env` when running `supabase start`.
    - When running functions locally with `supabase functions serve`, use the `--env-file ./supabase/.env.local` flag to load secrets.
    - Access secrets within local Edge Functions using `Deno.env.get('YOUR_SECRET_KEY')`.
- **Production (Hosted Supabase & Edge Functions):**
    - **DO NOT** deploy `.env` files.
    - Set secrets for your hosted Supabase project using:
        - **Supabase Dashboard:** Navigate to Project Settings > Edge Functions > Add New Secret.
        - **Supabase CLI:** Use `supabase secrets set KEY=VALUE` or `supabase secrets set --env-file ./path/to/your/prod.env`.
    - Access secrets within deployed Edge Functions using `Deno.env.get('YOUR_SECRET_KEY')`. The deployed environment automatically injects the secrets set via Dashboard/CLI.
    - List deployed secrets using `supabase secrets list`.
    - Unset secrets using `supabase secrets unset KEY1 KEY2 ...`.
- **Accessing Secrets in Edge Functions:** Use `Deno.env.get('SECRET_NAME')` within your TypeScript/JavaScript function code. Handle cases where the secret might not be set (returns `undefined`).

## Examples

<example>
**Local Development Setup:**

`.gitignore`:
```
# Supabase secrets
supabase/.env
supabase/.env.local
```

`supabase/.env.local`:
```
STRIPE_SECRET_KEY=sk_test_12345
SENDGRID_API_KEY=SG.abcde
# Optionally add Supabase keys if needed by functions, though often injected
# SUPABASE_SERVICE_ROLE_KEY=your_local_service_role_key
```

`supabase/functions/my-function/index.ts` (Local Access):
```typescript
const stripeKey = Deno.env.get('STRIPE_SECRET_KEY');
if (!stripeKey) {
  console.error('Stripe secret key not set!');
  // Handle error
}
// Use stripeKey...
```

Running locally:
```bash
supabase functions serve my-function --env-file ./supabase/.env.local
```

**Production Deployment:**

Setting secrets via CLI:
```bash
# Create a temporary production env file (DO NOT COMMIT)
# prod.env:
# STRIPE_SECRET_KEY=sk_live_67890
# SENDGRID_API_KEY=SG.fghij

supabase secrets set --env-file ./prod.env
# OR individually
supabase secrets set STRIPE_SECRET_KEY=sk_live_67890 SENDGRID_API_KEY=SG.fghij

# Verify
supabase secrets list
```

`supabase/functions/my-function/index.ts` (Deployed Access - code is the same):
```typescript
const stripeKey = Deno.env.get('STRIPE_SECRET_KEY'); // Reads from secrets set via CLI/Dashboard
if (!stripeKey) {
  // Handle error
}
// Use stripeKey...
```
Deploying the function:
```bash
supabase functions deploy my-function
```
</example>

<example type="invalid">
```typescript
// BAD: Hardcoding secrets in Edge Function code
// const stripeKey = 'sk_live_...'; // DANGEROUS

// BAD: Committing .env files to Git

// BAD: Trying to access Deno.env from Flutter code
// This won't work, Flutter runs on the client device, Deno.env is for the Deno runtime (Edge Functions)

// BAD: Forgetting to set secrets in production environment
// Deno.env.get('STRIPE_SECRET_KEY') will return undefined in deployed function
```
```bash
# BAD: Not using --env-file when serving locally
# supabase functions serve my-function
# (Function will likely fail if it relies on secrets)
```
</example>