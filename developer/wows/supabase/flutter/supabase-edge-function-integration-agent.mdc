---
description: 'Guides how to securely call Supabase Edge Functions from a Flutter application. Covers passing the authentication token and handling responses/errors. Apply when Flutter needs to trigger server-side logic hosted in Edge Functions.'
globs:
alwaysApply: false
---

# Calling Edge Functions from Flutter

## Critical Rules

- **Use HTTP Client:** Use a standard HTTP client package like `http` or `dio` to make requests to your Edge Function's invocation URL.
- **Invocation URL:** The URL follows the pattern: `YOUR_SUPABASE_URL/functions/v1/your-function-name`.
- **Authentication:**
    - If the Edge Function requires user authentication, retrieve the current user's JWT access token: `supabase.auth.currentSession?.accessToken`.
    - Pass the access token in the `Authorization` header as a Bearer token: `Authorization: Bearer <accessToken>`.
    - **Always** also include the `apikey` header with your project's `anonKey`: `apikey: YOUR_SUPABASE_ANON_KEY`. This is required by the Supabase API gateway.
- **Request Method & Body:** Use the appropriate HTTP method (POST, GET, etc.) as expected by your Edge Function. Send data in the request body (e.g., as JSON) if required. Set the `Content-Type` header accordingly (e.g., `application/json`).
- **Response Handling:** Handle the HTTP response status code and body. Parse the JSON response if applicable.
- **Error Handling:** Wrap the HTTP request in a `try-catch` block to handle network errors, timeouts, and non-2xx status codes from the function. Check the response body for potential error messages returned by the function itself.
- **Edge Function Security:** The Edge Function itself should validate the incoming JWT (using `supabase.auth.getUser(token)` inside the function) and perform necessary authorization checks before executing sensitive logic.

## Examples

<example>
```dart
import 'package:http/http.dart' as http;
import 'dart:convert'; // For jsonEncode/Decode
import 'package:supabase_flutter/supabase_flutter.dart';

// Function to call a secure Edge Function named 'process-data'
Future<Map<String, dynamic>?> callProcessDataFunction(Map<String, dynamic> inputData) async {
  final accessToken = supabase.auth.currentSession?.accessToken;
  final anonKey = 'YOUR_SUPABASE_ANON_KEY'; // Replace with your actual anon key
  final functionUrl = 'YOUR_SUPABASE_URL/functions/v1/process-data'; // Replace with your URL

  if (accessToken == null) {
    print('Error: User is not authenticated.');
    return null;
  }

  try {
    final response = await http.post(
      Uri.parse(functionUrl),
      headers: {
        'Authorization': 'Bearer $accessToken', // Pass user JWT
        'apikey': anonKey,                     // Pass anon key
        'Content-Type': 'application/json',
      },
      body: jsonEncode(inputData), // Send data as JSON
    );

    if (response.statusCode == 200) {
      // Success
      return jsonDecode(response.body) as Map<String, dynamic>;
    } else {
      // Handle function error (non-200 status)
      print('Edge Function Error: ${response.statusCode} ${response.body}');
      return null;
    }
  } catch (error) {
    // Handle network errors or other exceptions
    print('Error calling Edge Function: $error');
    return null;
  }
}

// --- Calling the function ---
// final result = await callProcessDataFunction({'value': 42});
// if (result != null) {
//   print('Function result: $result');
// }
```
**Example Edge Function (`supabase/functions/process-data/index.ts`) validating JWT:**
```typescript
import { createClient } from 'jsr:@supabase/supabase-js@2'
import { corsHeaders } from '../_shared/cors.ts' // Assuming CORS setup

Deno.serve(async (req) => {
  // Handle CORS preflight request
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    );

    // Validate the user's JWT
    const { data: { user }, error: authError } = await supabaseClient.auth.getUser();
    if (authError || !user) {
      console.error('Auth Error:', authError);
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 401,
      });
    }

    // User is authenticated, proceed with function logic
    console.log('Authenticated user:', user.id);
    const body = await req.json();
    const processedValue = (body.value || 0) * 2;

    return new Response(JSON.stringify({ result: processedValue }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error('Function Error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
})
```
</example>

<example type="invalid">
```dart
// BAD: Missing Authorization header for secure function
// final response = await http.post(Uri.parse(functionUrl), headers: {'apikey': anonKey, 'Content-Type': 'application/json'}, body: ...);

// BAD: Missing apikey header
// final response = await http.post(Uri.parse(functionUrl), headers: {'Authorization': 'Bearer $accessToken', 'Content-Type': 'application/json'}, body: ...);

// BAD: Sending service_role key from client
// final response = await http.post(Uri.parse(functionUrl), headers: {'Authorization': 'Bearer YOUR_SERVICE_KEY', 'apikey': anonKey, ...}); // DANGEROUS

// BAD: Not handling non-200 status codes from the function response
// if (response.statusCode == 200) { ... } // No else block

// BAD: Not handling network errors with try-catch
```
</example>