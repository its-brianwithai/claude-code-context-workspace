---
description: 'Guides the use of Supabase Realtime Presence feature in Flutter (`supabase_flutter` v2+) to track and share online status and custom state between users on the same channel. Covers tracking state (`channel.track()`), listening to presence events (`onPresenceSync`, `onPresenceJoin`, `onPresenceLeave`), and accessing presence state (`channel.presenceState()`).'
globs:
alwaysApply: false
---

# Using Realtime Presence in Flutter

## Critical Rules

- **Purpose:** Presence allows tracking which users are currently connected to a channel and sharing custom state associated with their connection (e.g., cursor position, status).
- **Get Channel:** Obtain a channel instance using `supabase.channel('channel_name')`.
- **Track State:** Call `channel.track(payload)` **after** the channel is successfully subscribed.
    - `payload` is a `Map<String, dynamic>` representing the state you want to share for the current user.
    - Call `track()` again anytime the user's state changes.
- **Listen for Events (v2+):** Use the specific presence event listeners:
    - `.onPresenceSync(callback)`: Fires initially after subscribing, providing the current presence state for all users on the channel. The callback receives a `payload` which is less relevant here; use `channel.presenceState()` inside the callback to get the full state.
    - `.onPresenceJoin(callback)`: Fires when a new user joins the channel. The callback receives a `payload` containing the `newPresences` (a `List<Presence>`).
    - `.onPresenceLeave(callback)`: Fires when a user leaves the channel (disconnects or explicitly untracks). The callback receives a `payload` containing the `leftPresences` (a `List<Presence>`).
- **Access Full State:** Use `channel.presenceState()` **inside** the event callbacks (especially `onPresenceSync`) to get the complete, up-to-date presence state for all users currently on the channel. It returns a `Map<String, List<Presence>>`, where the key is the presence key (usually user ID) and the value is a list of presence entries for that key (a user might have multiple connections).
- **Presence Object:** Each `Presence` object in the callbacks or `presenceState()` contains:
    - `presence_ref`: A unique identifier for the specific connection.
    - The custom state fields you sent via `track()`.
- **Subscribe:** Call `.subscribe()` on the channel after setting up listeners. The `track()` call should typically happen inside the `subscribe` callback once the status is `RealtimeSubscribeStatus.subscribed`.
- **Unsubscribe:** Call `supabase.removeChannel(channel)` or `supabase.removeAllChannels()` in `dispose()`. This automatically untracks the user's presence.
- **Authorization:** If the channel requires authorization (RLS on `realtime.messages`), ensure the channel is initialized with `private: true` and the user has `INSERT` (for tracking) and `SELECT` (for receiving) permissions for presence messages on that topic.

## Examples

<example>
```dart
// Inside a StatefulWidget's State class
RealtimeChannel? _presenceChannel;
Map<String, List<Presence>> _presenceState = {}; // To store presence state

@override
void initState() {
  super.initState();
  _presenceChannel = supabase.channel('online-users');

  _presenceChannel!
      .onPresenceSync((payload) { // Use channel.presenceState() here
        print('Sync event received');
        setState(() {
          _presenceState = _presenceChannel!.presenceState();
        });
        print('Current presence state: $_presenceState');
      })
      .onPresenceJoin((payload) { // Payload contains new presences
        print('Join event received: ${payload.newPresences}');
        // Optionally merge newPresences into local state, or just rely on next sync/presenceState()
         setState(() {
          _presenceState = _presenceChannel!.presenceState(); // Update state
        });
      })
      .onPresenceLeave((payload) { // Payload contains left presences
        print('Leave event received: ${payload.leftPresences}');
        // Optionally remove leftPresences from local state, or just rely on next sync/presenceState()
         setState(() {
          _presenceState = _presenceChannel!.presenceState(); // Update state
        });
      })
      .subscribe((status, error) async {
        if (status == RealtimeSubscribeStatus.subscribed) {
          print('Subscribed to presence channel!');
          // Track user's initial state once subscribed
          await _presenceChannel!.track({
            'user_id': supabase.auth.currentUser!.id,
            'online_at': DateTime.now().toIso8601String(),
            'status': 'online',
          });
        }
      });
}

// Example: Update presence status later
Future<void> updateUserStatus(String newStatus) async {
   if (_presenceChannel?.isSubscribed == true) {
     await _presenceChannel!.track({
       'user_id': supabase.auth.currentUser!.id,
       'online_at': DateTime.now().toIso8601String(), // Keep online_at updated
       'status': newStatus,
     });
   }
}

@override
void dispose() {
  if (_presenceChannel != null) {
    supabase.removeChannel(_presenceChannel!); // Unsubscribe and untrack
  }
  super.dispose();
}

// Example UI build method using _presenceState
@override
Widget build(BuildContext context) {
  // Flatten the presence state for display
  final onlineUsers = _presenceState.entries.expand((entry) => entry.value).toList();
  return ListView.builder(
     itemCount: onlineUsers.length,
     itemBuilder: (context, index) {
       final presence = onlineUsers[index];
       final userId = presence.payload['user_id'] as String?;
       final status = presence.payload['status'] as String?;
       return ListTile(
         title: Text('User: ${userId ?? 'Unknown'}'),
         subtitle: Text('Status: ${status ?? 'N/A'}'),
       );
     }
  );
}
```
</example>

<example type="invalid">
```dart
// BAD: Using v1 .on() method syntax in v2
// _channel.on(RealtimeListenTypes.presence, ChannelFilter(event: 'sync'), callback);

// BAD: Calling track() before channel is subscribed
// _channel = supabase.channel('online-users');
// await _channel.track({...}); // Error: Channel not subscribed
// _channel.subscribe();

// BAD: Relying only on payload in onPresenceSync instead of channel.presenceState()
// .onPresenceSync((payload) { print(payload); }); // Payload is minimal, doesn't contain full state

// BAD: Not unsubscribing in dispose()
```
</example>