---
description: 'Guides the retrieval of URLs for files stored in Supabase Storage within a Flutter application. Covers getting public URLs for public buckets and creating signed URLs for private buckets. Apply when displaying images or providing download links for stored files.'
globs:
alwaysApply: false
---

# Accessing Files from Supabase Storage in Flutter

## Critical Rules

- **Get Bucket Reference:** Use `supabase.storage.from('bucket_name')` to get a reference to the target bucket.
- **Public Buckets:**
    - For files in **public** buckets, use `getPublicUrl(path)` to retrieve the permanent, publicly accessible URL.
    - `path` is the object's key within the bucket (e.g., `'public/avatars/user_id.png'`).
    - This URL can be used directly in widgets like `Image.network()`.
    - Ensure the bucket is actually set to public in the Supabase Dashboard.
- **Private Buckets:**
    - For files in **private** buckets, use `createSignedUrl(path, expiresIn)` to generate a temporary, time-limited URL.
    - `path` is the object's key.
    - `expiresIn` is the duration in seconds for which the URL will be valid (e.g., `60` for 1 minute). Max is typically ~6 hours, check Supabase docs.
    - This method requires the user to have `SELECT` permission via RLS policies on the `storage.objects` table for the specified `path`.
    - The generated signed URL grants temporary access even if the bucket is private. Use these URLs carefully.
- **Downloading Files:**
    - Use `download(path)` to download the file contents as `Uint8List`.
    - This requires the user to have `SELECT` permission via RLS policies for the specified `path`.
    - Useful if you need to process the file data directly in the app rather than just displaying it via URL.
- **Error Handling:** Wrap URL generation or download calls in `try-catch` blocks.
    - `getPublicUrl` itself doesn't typically throw network errors (it just constructs a URL), but accessing the URL might fail if the object doesn't exist or the bucket isn't public.
    - `createSignedUrl` and `download` can throw `StorageException` if RLS policies deny access, the object doesn't exist, or network issues occur.
- **RLS Policies:** Accessing files (especially in private buckets or via `download`) depends on `SELECT` permissions defined in RLS policies on the `storage.objects` table. Policies typically check `bucket_id`, `owner`, or specific path patterns.

## Examples

<example>
```dart
// Get public URL for an image in a public 'avatars' bucket
final publicUrl = supabase.storage
    .from('avatars')
    .getPublicUrl('public/user_123.png');

// Use in an Image widget
Image.network(publicUrl);


// Create a signed URL for a file in a private 'documents' bucket (valid for 5 minutes)
try {
  final signedUrl = await supabase.storage
      .from('documents')
      .createSignedUrl('private/user_123/report.pdf', 300); // 300 seconds = 5 minutes

  // Provide this URL to the user for temporary access/download
  print('Signed URL: $signedUrl');
  // Example: Launch URL in browser using url_launcher package
  // if (await canLaunchUrl(Uri.parse(signedUrl))) {
  //   await launchUrl(Uri.parse(signedUrl));
  // }

} on StorageException catch (error) {
  // Likely RLS permission denied (missing SELECT permission) or object not found
  print('Error creating signed URL: ${error.message}');
}


// Download file contents from a private bucket
try {
  final Uint8List fileData = await supabase.storage
      .from('documents')
      .download('private/user_123/report.pdf');

  // Process fileData (e.g., save locally, display in a viewer)
  print('Downloaded ${fileData.length} bytes');

} on StorageException catch (error) {
  // RLS permission denied, object not found, etc.
  print('Error downloading file: ${error.message}');
}
```
**RLS Policy Example (Allow user to SELECT own files in private 'documents' bucket):**
```sql
CREATE POLICY "Allow authenticated user SELECT own documents"
ON storage.objects FOR SELECT TO authenticated
USING (
  bucket_id = 'documents' AND
  owner = auth.uid() AND
  (storage.foldername(name))[1] = 'private' AND -- Optional: check folder
  (storage.foldername(name))[2] = auth.uid()::text -- Optional: check user ID folder
);
```
</example>

<example type="invalid">
```dart
// BAD: Using getPublicUrl for a private bucket file
// final url = supabase.storage.from('documents').getPublicUrl('private/report.pdf');
// Accessing this URL will result in a 4xx error (likely 403 Forbidden or 404 Not Found)

// BAD: Using createSignedUrl without proper RLS SELECT policy
// await supabase.storage.from('documents').createSignedUrl('private/report.pdf', 60); // Throws StorageException

// BAD: Using download without proper RLS SELECT policy
// await supabase.storage.from('documents').download('private/report.pdf'); // Throws StorageException

// BAD: Not handling potential StorageException for signed URLs/downloads
```
</example>