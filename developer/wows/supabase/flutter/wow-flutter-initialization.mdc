---
description: 'Ensures correct initialization of the Supabase Flutter SDK (`supabase_flutter`). Apply when setting up Supabase in a Flutter project (`main.dart`) or reviewing initialization code. Covers API key usage, v2 options structure, and essential setup steps.'
globs:
alwaysApply: false
---

# Supabase Flutter Initialization

## Critical Rules

- **Initialize Supabase Early:** Call `Supabase.initialize()` within your `main()` function before `runApp()`. Ensure `WidgetsFlutterBinding.ensureInitialized()` is called first.
- **Use Correct Keys:** Initialize with your project's `url` and `anonKey`. **Never** embed the `service_role` key or other secrets directly in client-side Flutter code.
- **v2 Options Structure:** When providing custom options (Auth, Realtime, Storage), use the dedicated option classes (`FlutterAuthClientOptions`, `RealtimeClientOptions`, `StorageClientOptions`) passed to `Supabase.initialize()`.
- **Global Client:** Access the initialized client via `Supabase.instance.client`.

## Examples

<example>
```dart
// main.dart
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL', // Use environment variables or config
    anonKey: 'YOUR_SUPABASE_ANON_KEY', // Use environment variables or config
    authOptions: const FlutterAuthClientOptions(
      authFlowType: AuthFlowType.pkce, // PKCE is default in v2
    ),
    realtimeClientOptions: const RealtimeClientOptions(
      logLevel: RealtimeLogLevel.info,
    ),
    storageOptions: const StorageClientOptions(
      retryAttempts: 10,
    ),
  );
  runApp(MyApp());
}

final supabase = Supabase.instance.client;

class MyApp extends StatelessWidget {
  // ... rest of the app
}
```
</example>

<example type="invalid">
```dart
// BAD: Missing WidgetsFlutterBinding.ensureInitialized()
// BAD: Using service_role key in client code
// BAD: v1 style options
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  // Missing WidgetsFlutterBinding.ensureInitialized();

  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SERVICE_ROLE_KEY', // Incorrect key usage
    authFlowType: AuthFlowType.pkce, // v1 style option
  );
  runApp(MyApp());
}
```
</example>