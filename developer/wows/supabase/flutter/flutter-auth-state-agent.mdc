---
description: 'Guides the implementation of listening to authentication state changes using `supabase.auth.onAuthStateChange` in Flutter. Essential for reacting to sign-ins, sign-outs, token refreshes, and handling redirects after authentication flows. Apply when building navigation logic or UI updates based on the user''s authentication status.'
globs:
alwaysApply: false
---

# Handling Auth State Changes in Flutter

## Critical Rules

- **Listen to Stream:** Use `supabase.auth.onAuthStateChange.listen()` to subscribe to authentication events.
- **Manage Subscription:** Store the `StreamSubscription` returned by `listen()` and cancel it in the `dispose()` method of your `StatefulWidget` or equivalent lifecycle management point to prevent memory leaks.
- **Handle Events:** The listener callback receives an `AuthState` object containing the `AuthChangeEvent` (e.g., `signedIn`, `signedOut`, `tokenRefreshed`) and the `Session?`.
- **Initial State:** Check `supabase.auth.currentSession` in `initState()` to determine the initial auth state before the stream emits its first event.
- **Navigation/UI Updates:** Use the events received in the listener to trigger navigation (e.g., redirecting to an account page on `signedIn` or `tokenRefreshed` with a valid session) or update the UI state.
- **Redirect Handling:** For flows involving deep links (Magic Link, OAuth), the `signedIn` event will typically fire when the app receives the callback URL, indicating successful authentication. Implement logic within the listener to navigate the user appropriately upon receiving this event with a valid session.
- **Error Handling:** Provide an `onError` callback to the `listen()` method to handle potential errors during the auth state stream processing.

## Examples

<example>
```dart
// Inside a StatefulWidget's State class
late final StreamSubscription<AuthState> _authStateSubscription;

@override
void initState() {
  super.initState();

  // Check initial session state (optional but good practice)
  final initialSession = supabase.auth.currentSession;
  if (initialSession != null) {
     // Potentially navigate immediately if session is valid
     // Note: In v2, session might be expired initially.
  }

  _authStateSubscription = supabase.auth.onAuthStateChange.listen((data) {
    final session = data.session;
    if (session != null) {
      // User is signed in or session refreshed
      // Check if already on account page to prevent infinite loop
      if (ModalRoute.of(context)?.settings.name != '/account') {
         Navigator.of(context).pushReplacement(
           MaterialPageRoute(builder: (context) => const AccountPage()),
         );
      }
    } else {
      // User is signed out
      // Check if already on login page
       if (ModalRoute.of(context)?.settings.name != '/login') {
         Navigator.of(context).pushReplacement(
           MaterialPageRoute(builder: (context) => const LoginPage()),
         );
       }
    }
  }, onError: (error) {
    if (error is AuthException) {
      context.showSnackBar(error.message, isError: true);
    } else {
      context.showSnackBar('Auth State Error: $error', isError: true);
    }
  });
}

@override
void dispose() {
  _authStateSubscription.cancel(); // Cancel subscription
  super.dispose();
}
```
</example>

<example type="invalid">
```dart
// BAD: Not cancelling the subscription in dispose()
// Leads to memory leaks

// BAD: Relying solely on initialSession check without listening to the stream
// Won't react to subsequent sign-ins/sign-outs or token refreshes

// BAD: Not handling errors in the stream listener
// supabase.auth.onAuthStateChange.listen((data) { ... }); // Missing onError
```
</example>