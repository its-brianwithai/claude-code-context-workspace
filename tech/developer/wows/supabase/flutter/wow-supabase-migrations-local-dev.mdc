---
description: 'Promotes the use of the Supabase CLI for local development and managing database schema changes via migrations when building Flutter apps. Covers initializing the project, creating migrations (manually or via diff), applying changes locally, and deploying to production. Apply when setting up a new project or making database schema changes.'
globs:
alwaysApply: false
---

# Local Development & Migrations for Supabase Flutter Projects

## Critical Rules

- **Use Supabase CLI:** Install and use the Supabase CLI for managing the local development environment and database migrations.
- **Initialize Project:** Run `supabase init` in your project root to create the `supabase` directory.
- **Start Local Dev Env:** Run `supabase start` to spin up the local Supabase stack (Postgres, GoTrue, Storage, etc.) in Docker. Access local Studio at `http://localhost:54323` by default.
- **Link Project:** Use `supabase login` and `supabase link --project-ref <your-prod-project-id>` to connect your local setup to your hosted Supabase project for deployment.
- **Pull Remote Changes (Initial):** If starting with an existing hosted project, run `supabase db pull` **after linking** to create an initial migration file reflecting the remote schema. Apply this locally with `supabase db reset` or `supabase migration up`.
- **Making Schema Changes:**
    - **Option 1 (Manual Migrations):**
        - Create a new migration file: `supabase migration new <migration_name>`.
        - Write SQL DDL statements (CREATE TABLE, ALTER TABLE, etc.) in the generated `supabase/migrations/<timestamp>_<migration_name>.sql` file.
        - Apply locally: `supabase db reset` (recreates DB + applies all migrations + seed) or `supabase migration up` (applies pending migrations).
    - **Option 2 (Auto Schema Diff):**
        - Make schema changes using the local Studio UI (`http://localhost:54323`).
        - Generate a migration file from the changes: `supabase db diff -f <migration_name>`. Review the generated SQL.
        - Commit the migration file. Test locally with `supabase db reset`.
- **Seed Data:** Create a `supabase/seed.sql` file with `INSERT` statements for test/default data. This file is automatically executed after migrations when running `supabase db reset`.
- **Local Testing:** Test your Flutter app against the local Supabase instance using the local URL (`http://localhost:54321` by default) and local `anonKey` provided by `supabase start`.
- **Deploying Migrations:**
    - **NEVER** run `supabase db push` directly from your local machine to production without thorough testing and review.
    - **Recommended:** Use a CI/CD pipeline (like GitHub Actions) triggered by merges to `develop` (staging) and `main` (production) branches.
    - The CI/CD job should link to the appropriate project (staging/prod) using secrets and run `supabase db push` to apply migrations.
- **Version Control:** Commit the `supabase` directory (including `config.toml`, `migrations/`, `seed.sql`) to your Git repository. **DO NOT** commit `.env` files containing secrets.

## Examples

<example>
```bash
# Initial setup
supabase init
supabase login
supabase link --project-ref <your-project-id>
# supabase db pull # If linking to existing project
supabase start

# --- Manual Migration Workflow ---
# Create migration file
supabase migration new create_posts_table
# Edit supabase/migrations/<...>.sql:
#   create table posts (id serial primary key, title text);
# Apply locally (Option A: Reset DB + Seed)
supabase db reset
# Apply locally (Option B: Apply pending)
# supabase migration up

# --- Auto Diff Workflow ---
# Make changes in local Studio UI (localhost:54323) - e.g., add 'content' column to posts
# Generate migration from diff
supabase db diff -f add_content_to_posts
# Review supabase/migrations/<...>.sql
# Test locally
supabase db reset

# --- Deployment (Conceptual CI/CD Step) ---
# In GitHub Action for production branch:
# - uses: supabase/setup-cli@v1
# - run: supabase link --project-ref ${{ secrets.PRODUCTION_PROJECT_ID }}
# - run: supabase db push --password ${{ secrets.PRODUCTION_DB_PASSWORD }} # Use password secret

# --- Flutter App Connection (Local Dev) ---
# main.dart
# await Supabase.initialize(
#   url: 'http://localhost:54321', // Local Supabase URL
#   anonKey: 'LOCAL_ANON_KEY', // Local anon key from `supabase start` output
# );
```
</example>

<example type="invalid">
```bash
# BAD: Making schema changes directly on the hosted production DB via Dashboard
# (Changes are not captured in migrations, local env becomes out of sync)

# BAD: Running `supabase db push` from local machine directly to production
# (Bypasses review, testing, and CI/CD)

# BAD: Not committing migration files to Git
# (Team members cannot reproduce the schema, CI/CD fails)

# BAD: Editing old migration files after they have been applied locally or deployed
# (Leads to inconsistent states; create new migrations for changes)

# BAD: Forgetting to run `supabase start` before developing/testing Flutter app locally
```
</example>